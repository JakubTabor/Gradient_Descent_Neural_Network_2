# First I load my simple dataset which include three columns : area, bedrooms and	price
# Now I need to scale my data, so I import "MinMaxScaler" from "preprocessing", and put inside area and bedroom columns I save it as X_scaled 
# Then I scale price column and I also reshape it into 2D array, I save it as x_scaled
# Now I gonna build from scratch batch gradient descent, I gonna need here X, y_true, epochs and learning_rate which I set to (0.01)
# First I pass "number_of_features", so "area and bedroom", shape of it will be in rows and columns
# Then I initialize my weights with ones and set shape as previous saved "number_of_features", also initialize bias with zero
# And I pass shape of "total_samples" for later which is " X.shape[0]"
# I create two empty list to record cost and epochs and later plot them 
# Then I make for loop in length of my epochs, inside I define "y_predicted", which is dot product of w1, w2 and X transpose, plus bias
# Now I define first derivative, so I pass X transpose dot product of difference between true and predicted value into minus average of total samples 
# Then my second derivative, which is sum of difference between true and predicted value into minus average of total samples
# Next I can calculate my weights, so my w minus learning rate into previous defined w_grad, and this same with bias 
# Then I define cost of my function, which is mean squared error between true and predicted value
# Now I define recording progress, and it will be every tenth iteration
# In my lists will be filling with values recorded values, cost and epochs
# And my function will return weights, bias, cost, cost list and epoch list, so I can plot it later
# Then I call my function and put inside X_scaled, y_scaled_reshaped, pass number of epochs (500)
