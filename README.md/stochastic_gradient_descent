# Now Its time to build stochastic gradien descent, I gonna need to import random 
# I gonna need to build my function this same things as previous, so X, y_true, epochs and learning rate, which I set to (0.01)
# Now I gonna pass this same variables as previous, so I define "number_of_features", weights, bias and "total_samples"   
# Then I create two lists to record epochs and cost, to later plot them
# I start for loop in length of my epochs, and now I gonna use previous imported "random", to choose random samples
# I use "randint" to pick random samples between (zero and total_samples - 1) indexes in python are -1, I save it as "random_index "
# Now I need to pick samples from X and y_true, so I create two variables for it
# First will be (X of "random_index") and (y_true of "random_index"), I save it as "sample_x" and "sample_y" 
# Now I define "y_predicted", which is dot product between (w and transpose "sample_x") plus some bias 
# Then I calculate first derivatives, which is random sample of X transpose, dot product of difference between true sample and predicted
# And I take mean of it multiply by minus two, it will be variable "w_grad"
# Next my second derivatives for bias, it is the same, but in this case I take mean of y sample and predicted, without dot product
#Now I can calculate first weights, some variable minus learning rate into w_grad variable, which I calculate above
